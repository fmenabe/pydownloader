#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os.path as path
import sys
import re
import yaml
import urwid
import time
import multiprocessing
import clg
import ddl

SITE_REGEXP = re.compile('^http://(www[.])?([a-zA-Z]*)[.](net|com|org)/.*$')

OPTIONS_FILE = path.join(path.dirname(__file__), 'options.yml')
try:
    OPTIONS = yaml.load(open(OPTIONS_FILE))
except Exception as err:
    print("Unable to load command line configuration: %s" % err)
    sys.exit(1)


PALETTE = [
        ('body','black', 'white'),
        ('footer', 'light gray', 'black'),
        ('key', 'light cyan', 'black', 'underline'),
        ('waiting', 'black', 'white'),
        ('downloading', 'dark blue', 'white'),
        ('connecting', 'dark blue', 'white'),
        ('finished', 'dark green', 'white'),
        ('failed', 'dark red', 'white'),
]


def mb(value):
    return float(value) / 1024 / 1024


class LinkItem(urwid.Pile):
    def __init__(self, url, status='waiting'):
        self.url = url
        self.status = status
        self.last_download = 0
        self.url_str = urwid.Text((self.status, self.url))
        self.status_str = urwid.Text((self.status, status), align='right')
        self.current_str = urwid.Text((self.status, '-'), align='right')
        self.speed_str = urwid.Text((self.status, '-'), align='right')

        self.first_line = urwid.Columns([
            self.url_str,
            ('fixed', 28, self.current_str),
        ])

        urwid.Pile.__init__(self, [self.first_line])


    def keypress(self, size, key):
        return key


    def set_status(self, status):
        self.status = status
        self.url_str.set_text((self.status, self.url))
        self.status_str.set_text((self.status, status))


    def set_progress(self, downloaded, filesize):
        completed = downloaded * 100 /filesize
        self.progress_bar.set_completion(completed)


    def set_current(self, downloaded, filesize):
        diff = downloaded - self.last_download
        self.last_download = downloaded
        speed_str = '-' if diff == 0 else '%.2f Mb/s' % mb(diff)
        self.current_str.set_text((
            self.status,
            '%.1f/%d Mb (%s)' % (
                mb(downloaded),
                round(mb(filesize)),
                speed_str
            )
        ))
        return diff


    def failed(self, msg):
        urwid.Pile.__init__(
            self, [self.first_line, urwid.Text((self.status, msg))]
        )


class DownloaderView(urwid.Frame):
    def __init__(self, manager):
        self.manager = manager

        self.items = [LinkItem(link['url']) for link in self.manager.links]

        self.listbox = urwid.AttrMap(
            urwid.ListBox(urwid.SimpleListWalker(self.items)),
            'body'
        )
        self.status_str = urwid.Text("- download(s) at -")
        self.exit_str = urwid.AttrMap(
            urwid.Text(
                ["Press ", ('key', "q"), " or ", ('key', "Q"), " to exit"]
            ),
            'footer'
        )
        self.footer = urwid.Columns([
            self.status_str,
            ('fixed', 20, self.exit_str)
        ])
        urwid.Frame.__init__(self, self.listbox, footer=self.footer)


    def update(self):
        diff = 0
        nb_downloads = 0
        for index, item in enumerate(self.items):
            link = self.manager.links[index]

            # Set status and print the message if current download fail.
            item.set_status(link['status'])
            if link['status'] == 'failed':
                item.failed(link['error'])
                continue
            elif link['status'] in ('connecting', 'downloading'):
                nb_downloads += 1

            diff += item.set_current(link['downloaded'], link['filesize'])

        self.status_str.set_text(
            "%s download(s) at %.2f Mb/s" % (nb_downloads, mb(diff))
        )


class Downloader(object):
    def __init__(self, manager):
        self.manager = manager
        self.loop_handler = None
        self.view = DownloaderView(manager)


    def _keyevent(self, input):
        if input in ('q', 'Q'):
            # Remove loop.
            if self.loop_handler:
                self.main_loop.remove_alarm(self.loop_handler)

            # Exit urwid.
            raise urwid.ExitMainLoop()


    def loop(self, loop=None, user_data=None):
        self.view.update()
        self.loop_handler = self.main_loop.set_alarm_in(1, self.loop)


    def main(self):
        self.main_loop = urwid.MainLoop(
            self.view, PALETTE, unhandled_input=self._keyevent
        )
        self.loop(self)
        self.main_loop.run()


def main():
    parser = clg.CommandLine(OPTIONS)
    parser.parse()

    # Check configuration file exists.
    config_file = path.expanduser(parser.args['conf'])
    if not path.exists(config_file):
        print("Configuration file '%s' not exists!" % parser.args['conf'])
        sys.exit(1)

    # Get datas from arguments.
    sites = yaml.load(open(config_file))

    if parser.args['file']:
        if not path.exists(parser.args['file']):
            print("File '%s' not exists!" % parser.args['file'])
            sys.exit(1)
        with open(parser.args['file']) as fhandler:
            links = [
                line.strip() \
                    for line in fhandler.readlines() \
                    if line[0] != '#' and line.strip() != ''
            ]
    else:
        links = [parser.args['link']]

    dst = parser.args['dest']
    parallel = parser.args['parallel']

    # Start a process for managing downloads.
    manager = ddl.DownloadManager(links, sites, dst, parallel)
    manager.start()

    # Start interface.
    Downloader(manager).main()

    # Kill all process (ugly!?).
    import os
    processes = manager.processes
    processes.append(manager.pid)
    processes.append(manager.manager._process.pid)
    for pid in sorted(processes):
        try:
            os.kill(pid, 9)
        except IOError:
            pass
    os._exit(0)


if __name__ == '__main__':
    main()
